plugins {
    id "java-library"
}

ext {
    repo_dir = projectDir.getParent() + "/";

    // Mod Info
    id = "gl_galo"
    mod_name = "Galo"
    author = "zveillette"
    mod_version = "0.0.1"
	mod_description = "A small quest and an unique encounter"
	game_version = "0.95.1a"
    mod_plugin = "com.zveillette.galo.GaloPlugin"  

    mod_info_template_file = "mod_info_template.json"
    mod_info_file = "mod_info.json"

    // JAR
    jars = "jars"
    galo_jar = "galo.jar"
    galo_lib = "${buildDir}/libs/${galo_jar}"

    // Distribution
    dist = "${repo_dir}/dist/"
    dist_temp = "${dist}package/"
    dist_file_name = "Galo_"
}

dependencies {
    implementation files("libs-starsector/log4j-1.2.9.jar")
    implementation files("libs-starsector/lwjgl.jar")
    implementation files("libs-starsector/lwjgl_util.jar")
    implementation files("libs-starsector/starfarer.api.jar")
    implementation files("libs-starsector/starfarer_obf.jar")
    implementation files("libs-starsector/xstream-1.4.10.jar")
}

sourceSets {
    main {
        java {
            srcDirs "src/"
        }
    }
}

compileJava {
    options.release = 7
}

jar {
    archiveBaseName = "galo"
}

// - TASKS -------------------------------------------------------------

// Common
def createModInfo = tasks.register("create-mod-info", Copy) {
    from "${repo_dir}${mod_info_template_file}"
    into repo_dir
    rename mod_info_template_file, mod_info_file

    filter { line -> line.replaceAll('\\$\\{id\\}', id)}
    filter { line -> line.replaceAll('\\$\\{name\\}', mod_name)}
    filter { line -> line.replaceAll('\\$\\{author\\}', author)}
    filter { line -> line.replaceAll('\\$\\{version\\}', mod_version)}
    filter { line -> line.replaceAll('\\$\\{description\\}', mod_description)}
    filter { line -> line.replaceAll('\\$\\{game_version\\}', game_version)}
    filter { line -> line.replaceAll('\\$\\{mod_plugin\\}', mod_plugin)}
}


// Dev
def cleanDev = tasks.register("clean-dev", Delete) {
    delete "${repo_dir}${jars}"
    delete "${repo_dir}${mod_info_file}"
}

def createDev = tasks.register("create-dev") {
    dependsOn "create-mod-info"
    dependsOn "build"
}

tasks.register("build-dev", Copy) {
    dependsOn "clean-dev"
    dependsOn "create-dev"

    from galo_lib
    into "${repo_dir}${jars}"
}


// Dist
tasks.register("clean-dist", Delete) {
    delete dist
    delete "${repo_dir}${mod_info_file}"
}

def copyDist = tasks.register("copy-dist", Copy) {
    dependsOn "create-mod-info"
    dependsOn "build"
    from("${repo_dir}${mod_info_file}")

    from(galo_lib) {
        into jars
    }

    from("${repo_dir}data") {
        into "data"
    }

    from("${repo_dir}graphics") {
        into "graphics"
    }

    into dist_temp
}

tasks.register("build-dist", Zip) {
    dependsOn "clean-dist"
    dependsOn "copy-dist"

    from dist_temp
    include "*"
    include "**/*"
    archiveFileName = "${dist_file_name}${mod_version}".replace(".", "-") + ".zip"
    destinationDirectory = file(dist)
}

compileJava.configure {
    mustRunAfter createModInfo
}

copyDist.configure {
    mustRunAfter createModInfo
    mustRunAfter build
}

createDev.configure {
    mustRunAfter cleanDev
}